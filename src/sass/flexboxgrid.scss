$column-count: 12;
$column-selector: '.col';

$gutter-width: 1rem;
$outer-margin: 2rem;
$gutter-compensation: (($gutter-width / 2) * -1);
$half-gutter-width: ($gutter-width / 2);

$width-xs: 30;
$width-sm: 48;
$width-md: 62;
$width-lg: 75;

$viewport-xs: #{$width-xs}em;
$viewport-sm: #{$width-sm}em;
$viewport-md: #{$width-md}em;
$viewport-lg: #{$width-lg}em;

$container-sm: #{$width-sm}rem + $gutter-width;
$container-md: #{$width-md}rem + $gutter-width;
$container-lg: #{$width-lg}rem + $gutter-width;

$xs: 'xs';
$sm: 'sm';
$md: 'md';
$lg: 'lg';

$block-delimiter: '-';
$element-delimiter: '-';
$modifier-delimiter: '-';

$defaultQuery: $viewport-xs;
$sizes: #{$xs}, #{$sm}, #{$md}, #{$lg};
$queries: #{$viewport-xs}, #{$viewport-sm}, #{$viewport-md}, #{$viewport-lg};

$properties: 'flex-basis', 'max-width';

@mixin queries($queries: $queries) {
  @each $query in $queries {
    @if ($query == $defaultQuery) {
      @content;
    } @else {
      @media screen and (min-width: #{$query}) {
        @content;
      }
    }
  }
}

@mixin percentWidth($property, $columns, $count) {
  #{$property}: ((100% / $columns) * $count);
}

@mixin percentOffset($property, $columns, $count) {
  $singleColumnWidth: ((100% / $columns) * 1);
  #{$property}: $singleColumnWidth * $count;
}

@mixin columns($selector, $columns: 0, $queries: $queries) {
  @each $size in $sizes {
    @for $i from 1 through $columns {
      #{$selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$i} {
        @include queries($queries) {
          @content;
          @each $prop in $properties {
            @include percentWidth($prop, $columns, $i);
          }
        }
      }
    }
  }
}

@mixin offsets($selector, $columns: 0, $queries: $queries) {
  @each $size in $sizes {
    @for $i from 1 through $columns {
      #{$selector}#{$block-delimiter}offset#{$modifier-delimiter}#{$size}#{$modifier-delimiter}#{$i} {
        @include queries($queries) {
          @content;
          @each $prop in $properties {
            @include percentOffset($prop, $columns, $i);
          }
        }
      }
    }
  }
}

@mixin breakpoints($selector, $queries: $queries) {
  @each $size in $sizes {
    #{$selector}#{$modifier-delimiter}#{$size} {
      @include queries($queries) {
        @content;
      }
    }
  }
}

.container-fluid {
  box-sizing: border-box;
  margin-right: auto;
  margin-left: auto;
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.row {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

%column {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
}

@include breakpoints($column-selector) {
  @extend %column;
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

@include columns($column-selector, $column-count) {
  @extend %column;
}

@include breakpoints('.start') {
  justify-content: start;
}

@include breakpoints('.center') {
  justify-content: center;
}

@include breakpoints('.end') {
  justify-content: end;
}

@include breakpoints('.top') {
  align-items: flex-start;
}

@include breakpoints('.middle') {
  align-items: center;
}

@include breakpoints('.bottom') {
  align-items: flex-end;
}

@include breakpoints('.around') {
  justify-content: space-around;
}

@include breakpoints('.between') {
  justify-content: space-between;
}

@include breakpoints('.first') {
  order: -1;
}

@include breakpoints('.last') {
  order: 1;
}

@include breakpoints('.reverse') {
  flex-direction: row-reverse;
}

